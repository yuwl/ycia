<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.thinkgem.jeesite.modules.agent.dao.AgentAccountDao">
    
	<sql id="agentAccountColumns">
		a.id AS "id",
		a.agent_id AS "agentId",
		a.balance AS "balance",
		a.income AS "income",
		a.withdraw AS "withdraw",
		a.create_time AS "createTime",
		a.update_time AS "updateTime",
		a.company_id AS "companyId"
	</sql>
	
	<sql id="agentAccountJoins">
	</sql>
    
	<select id="get" resultType="AgentAccount">
		SELECT 
			<include refid="agentAccountColumns"/>
		FROM agent_account a
		<include refid="agentAccountJoins"/>
		WHERE a.id = #{id}
	</select>
	<select id="getAccountByAgentId" resultType="AgentAccount">
		SELECT 
			<include refid="agentAccountColumns"/>
		FROM agent_account a
		<include refid="agentAccountJoins"/>
		WHERE a.agent_id = #{agentId}
	</select>
	<select id="findList" resultType="AgentAccount">
		SELECT 
			<include refid="agentAccountColumns"/>
		FROM agent_account a
		<include refid="agentAccountJoins"/>
		<where>
			
			<if test="id != null and id != ''">
				AND a.id = #{id}
			</if>
			<if test="agentId != null and agentId != ''">
				AND a.agent_id = #{agentId}
			</if>
			<if test="balance != null and balance != ''">
				AND a.balance = #{balance}
			</if>
			<if test="income != null and income != ''">
				AND a.income = #{income}
			</if>
			<if test="withdraw != null and withdraw != ''">
				AND a.withdraw = #{withdraw}
			</if>
			<if test="createTime != null and createTime != ''">
				AND a.create_time = #{createTime}
			</if>
			<if test="updateTime != null and updateTime != ''">
				AND a.update_time = #{updateTime}
			</if>
			
			<if test="companyId != null and companyId != ''">
				AND a.company_id = #{companyId}
			</if>
		</where>
		ORDER BY a.update_time DESC
		<!-- <choose>
			<when test="page !=null and page.orderBy != null and page.orderBy != ''">
				ORDER BY ${page.orderBy}
			</when>
			<otherwise>
			</otherwise>
		</choose> -->
	</select>
	
		<select id="findListFinance" resultType="AgentAccountR">
		SELECT b.name AS "agentName",
			c.id AS "fundDetail",
			GROUP_CONCAT(c.trade_type) AS "tradeType",
			GROUP_CONCAT(c.trade_status) AS "tradeStatus",
			<include refid="agentAccountColumns"/>
		FROM agent_account a 
		left outer join agent b on a.agent_id = b.id 
		left outer join agent_fund_detail c on a.agent_id = c.agent_id 
		<include refid="agentAccountJoins"/>
		<where>
			
			<if test="id != null and id != ''">
				AND a.id = #{id}
			</if>
			<if test="agentId != null and agentId != ''">
				AND a.agent_id IN (select age.id from agent age where age.name = #{agentId})
			</if>
			<if test="balance != null and balance != ''">
				AND a.balance = #{balance}
			</if>
			<if test="income != null and income != ''">
				AND a.income = #{income}
			</if>
			<if test="withdraw != null and withdraw != ''">
				AND a.withdraw = #{withdraw}
			</if>
			<if test="createTime != null and createTime != ''">
				AND a.create_time = #{createTime}
			</if>
			<if test="updateTime != null and updateTime != ''">
				AND a.update_time = #{updateTime}
			</if>
			
			<if test="companyId != null and companyId != ''">
				AND a.company_id = #{companyId}
			</if>
		</where>
		GROUP BY a.id
		ORDER BY a.update_time DESC
		<!-- <choose>
			<when test="page !=null and page.orderBy != null and page.orderBy != ''">
				ORDER BY ${page.orderBy}
			</when>
			<otherwise>
			</otherwise>
		</choose> -->
	</select>
	
	<select id="findAllList" resultType="AgentAccount">
		SELECT 
			<include refid="agentAccountColumns"/>
		FROM agent_account a
		<include refid="agentAccountJoins"/>
		<where>
			
		</where>		
		<choose>
			<when test="page !=null and page.orderBy != null and page.orderBy != ''">
				ORDER BY ${page.orderBy}
			</when>
			<otherwise>
			</otherwise>
		</choose>
	</select>
	
	<insert id="insert">
		INSERT INTO agent_account(
			id,
			agent_id,
			balance,
			income,
			withdraw,
			create_time,
			update_time,
			company_id
		) VALUES (
			#{id},
			#{agentId},
			#{balance},
			#{income},
			#{withdraw},
			#{createTime},
			#{updateTime},
			#{companyId}
		)
	</insert>
	
	<update id="update">
		UPDATE agent_account SET 	
			agent_id = #{agentId},
			balance = #{balance},
			income = #{income},
			withdraw = #{withdraw},
			create_time = #{createTime},
			update_time = #{updateTime},
			company_id = #{companyId}
		WHERE id = #{id}
	</update>
	
	<update id="delete">
		DELETE FROM agent_account
		WHERE id = #{id}
	</update>
	
</mapper>